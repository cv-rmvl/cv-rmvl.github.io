import{_ as g,c as m,a as n,e as a,b as i,d as e,w as l,r as t,o as u}from"./app-D_52kpVc.js";const v="/images/quickstart/win/vs_config.png",d="/images/quickstart/win/vs_arrow.png",A="/images/quickstart/win/win_edit_env.png",b="/images/quickstart/win/vs_run.png",y="/images/quickstart/win/vscode_proj.png",C="/images/quickstart/win/qt_config.png",M="/images/quickstart/win/qt_select.png",D={};function f(V,s){const p=t("ECharts"),o=t("font"),k=t("VPIcon"),c=t("CodeTabs");return u(),m("div",null,[s[15]||(s[15]=n('<h2 id="前置环境安装" tabindex="-1"><a class="header-anchor" href="#前置环境安装"><span>前置环境安装</span></a></h2><ul><li><p>Windows 上最强大的 C++ 开发工具当属 Visual Studio，您可以在<a href="https://visualstudio.microsoft.com/zh-hans/" target="_blank" rel="noopener noreferrer">官网</a>下载免费的 Visual Studio Community 版本，其中包含了 Microsoft Visual C++ 编译器，是 Windows 上常用的 C++ 编译器。</p></li><li><p>此外，如果您对 GNU 标准更感兴趣，您可以使用 <a href="https://www.mingw-w64.org/downloads/" target="_blank" rel="noopener noreferrer">MinGW</a> 编译器，比较常用的做法是，使用 Qt Creator 集成 MinGW 编译器，Qt Creator 是一个跨平台的 C++ 集成开发环境，您可以在<a href="https://www.qt.io/download" target="_blank" rel="noopener noreferrer">Qt 官网</a>进行下载。当然您也可以直接下载 MinGW Tool Kits，其中内置的 MinGW Makefiles 可以与 Visual Studio 的 MSBuild 相媲美，但这样需要您手动编写 Makefile 文件，或者利用 CMake 进行构建，这正是 RMVL 的构建方式。</p></li><li><p>如果喜欢自己配置工具链的，需要使用 CMake，Windows 用户可直接在<a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">官网</a>下载 CMake 安装包，安装完成后，您可以在 Windows PowerShell 中输入 <code>cmake --version</code> 查看是否安装成功。</p></li></ul><hr><p>总的来说，Windows 用户推荐使用以下 3 种使用方式：</p><ul><li><p><mark>方案一</mark> —— <code>Visual Studio</code> (<code>Microsoft Visual C++</code> + <code>MSBuild</code>)</p><p>适合新手入门、简单测试，但配置偏复杂，且自由度不高，不适合以 RMVL 为基础进行二次开发；</p></li><li><p><mark>方案二</mark> —— <code>Visual Studio Code</code> + <code>MSBuild</code> + <code>CMake</code></p><p>适合二次开发，二次开发的自由度高，配置简单，但需要有 <code>CMake</code> 基础；</p></li><li><p><mark>方案三</mark> —— <code>Qt Creator</code> + <code>MinGW</code> + <code>MinGW Makefiles</code> + <code>CMake</code></p><p>比较适合二次开发，项目配置较复杂，因为要源码编译，可视化 CMake 环境配置，与 GNU 标准兼容好，需要有 <code>CMake</code> 基础。</p></li></ul>',5)),a(p,{id:"echarts-50",config:"eJyr5lJQUMpJTU/NS1GyUgDxgPyUxJJEIC9a6dm0nc8WdjzZ0aCkowDj7OpB4uzoVIoF6qnVARlTlJiSWIQwJTMvJTM5sSQfJBQNFlJQqFZQykvMTQWKKL3Y0Pxi/VSgOU/27QeZmJtYARQ2NIAYhqb46brOF4tbn69reDZjMkHFL1t7n+9dR6TiJ3v3P5+y4nnj1mdbdhN2xs7NT/s3PG3d83TdTlTFYLWIoChOLcpMLYZ7HBIiQHGYQU6lKempJQplxQrFBcCgz8xLV4JZp1RSWQBWAwlOuDAsUqB8hKFg2bLEnFKQrmhDAx0FCx0FUx0FIx0Fw1iYdhTbEdEKl4X7Fpe5ljoKZmCTwRbgNReYQkgy1wRoKNRo/O7tRDIXygIFOYQXy1XLBQB7B9EV",title:"Windows%20%E5%B9%B3%E5%8F%B0%E4%B8%8B%E7%9A%84%203%20%E7%A7%8D%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F%E6%8C%87%E6%A0%87%E5%AF%B9%E6%AF%94"}),s[16]||(s[16]=n('<h2 id="方案一" tabindex="-1"><a class="header-anchor" href="#方案一"><span>方案一</span></a></h2><p align="right">—— <code>Visual Studio</code> (<code>Microsoft Visual C++</code> + <code>MSBuild</code>)</p><p>需要下载 Visual Studio，网上教程很多，这里不再赘述。</p><h3 id="下载-rmvl-安装包" tabindex="-1"><a class="header-anchor" href="#下载-rmvl-安装包"><span>下载 RMVL 安装包</span></a></h3><p>从 <a href="https://github.com/cv-rmvl/rmvl/releases" target="_blank" rel="noopener noreferrer">Github</a> 下载 RMVL 安装包，例如 <code>2.1.1</code> 版本可直接点击<a href="https://github.com/cv-rmvl/rmvl/releases/download/2.1.1/RMVL-2.1.1-amd64-windows.exe" target="_blank" rel="noopener noreferrer">此处</a>进行下载，下载完成后双击即可执行安装程序。RMVL 库的安装路径可以自行选择，这里不做要求，比如可以安装在 <code>D:\\RMVL</code> 路径下，后文用 <code>\\path\\to\\RMVL</code> 表示该安装路径。</p><h3 id="配置-visual-studio" tabindex="-1"><a class="header-anchor" href="#配置-visual-studio"><span>配置 Visual Studio</span></a></h3><p>打开 Visual Studio，点击创建新项目，选择<mark>空项目 C++</mark>，输入项目名称，例如 <code>RMVLDemo</code>，设置项目路径，点击确定，即可进入项目，如下图所示。</p><p><img src="'+v+'" alt="vs_config"></p><h4 id="配置头文件搜索路径" tabindex="-1"><a class="header-anchor" href="#配置头文件搜索路径"><span>配置头文件搜索路径</span></a></h4><p>右键点击左侧的项目名称 <code>RMVLDemo</code>，在最下方选择<mark>属性</mark>，会弹出一个对话框，对话框顶上显示了当前的配置，有 <code>Debug</code> 和 <code>Release</code> 两种，一般默认是 <code>Debug</code> 模式，即 <code>活动(Debug)</code>。</p><p>先选择 <code>Debug</code> 模式，在对话框中，选择<mark>VC++ 目录</mark>，点击<mark>包含目录</mark>，右边会出现一个小箭头 <img src="'+d+'" alt="VS Arrow" width="15" style="vertical-align:middle;">，点击箭头，点击 <code>&lt;编辑...&gt;</code>，在其中添加 RMVL 的头文件路径 <code>\\path\\to\\RMVL\\include</code>，添加完成后点击确定。</p><p>接着选择 <code>Release</code> 模式，重复上述操作。</p><h4 id="配置静态库搜索路径" tabindex="-1"><a class="header-anchor" href="#配置静态库搜索路径"><span>配置静态库搜索路径</span></a></h4><div class="hint-container important"><p class="hint-container-title">重要</p><p><code>*.lib</code> 文件是 Windows 下的静态库文件或动态库的导入库文件，RMVL 在 Windows 下提供的 <code>*.lib</code> 文件均属于静态库文件。</p></div><p>同理，分别在 <code>Debug</code> 和 <code>Release</code> 模式下设置以下内容，在<mark>VC++ 目录</mark>中，点击<mark>库目录</mark>，右边会出现一个小箭头 <img src="'+d+'" alt="VS Arrow" width="15" style="vertical-align:middle;">，点击箭头，点击 <code>&lt;编辑...&gt;</code>，在其中添加 RMVL 的导入库文件路径 <code>\\path\\to\\RMVL\\x64\\vc17\\lib</code>，添加完成后点击确定。</p><h4 id="配置静态库" tabindex="-1"><a class="header-anchor" href="#配置静态库"><span>配置静态库</span></a></h4><p>在 <code>Debug</code> 模式下，选择<mark>链接器</mark>，选择<mark>输入</mark>，点击<mark>附加依赖项</mark>，右边会出现一个小箭头 <img src="'+d+'" alt="VS Arrow" width="15" style="vertical-align:middle;">，点击箭头，点击 <code>&lt;编辑...&gt;</code>，在其中手动写入 <code>rmvl_world&lt;xxx&gt;d.lib</code>，<code>xxx</code> 为 RMVL 版本号，例如 <code>2.1.1</code> 版本的 <code>xxx</code> 为 <code>211</code>，即 <code>rmvl_world211d.lib</code>，添加完成后点击确定。</p>',17)),i("p",null,[s[1]||(s[1]=e("同理，选择 ")),s[2]||(s[2]=i("code",null,"Release",-1)),s[3]||(s[3]=e(" 模式，重复上述操作，")),a(o,{color:"red"},{default:l(()=>s[0]||(s[0]=[e("但要注意")])),_:1}),s[4]||(s[4]=e("，附加依赖项这里需要写入 ")),s[5]||(s[5]=i("code",null,"rmvl_world<xxx>.lib",-1)),s[6]||(s[6]=e("，")),s[7]||(s[7]=i("code",null,"2.1.1",-1)),s[8]||(s[8]=e(" 版本下即 ")),s[9]||(s[9]=i("code",null,"rmvl_world211.lib",-1)),s[10]||(s[10]=e("。"))]),s[17]||(s[17]=n('<div class="hint-container tip"><p class="hint-container-title">提示</p><p>版本号可以在安装路径下的 <code>x64\\vc17\\lib</code> 目录下找到对应的导入库文件来获取，例如 <code>rmvl_world211.lib</code> 和 <code>rmvl_world211d.lib</code>。</p></div><h4 id="其他配置" tabindex="-1"><a class="header-anchor" href="#其他配置"><span>其他配置</span></a></h4><ul><li><p>语言标准：在 <code>Debug</code> 和 <code>Release</code> 模式下，依次选择<mark>配置属性</mark>，<mark>常规</mark>，点击<mark>C++ 语言标准</mark>，右边会出现一个小箭头 <img src="'+d+'" alt="VS Arrow" width="15" style="vertical-align:middle;">，点击箭头，标准可以往高了选，推荐选择<code>ISO C++20 标准 (/std:c++20)</code>。</p></li><li><p>动态库搜索路径：这是 Windows 可执行程序在实际运行时需要搜索的路径，如果您需要使用 RMVL 相机相关的功能，即用到安装路径下 <code>x64\\vc17\\bin</code> 中的部分 DLLs，那么需要在系统环境变量中添加该路径。首先 Windows 的搜索中输入 “环境变量”，可以找到以下内容</p><div style="text-align:center;"><img src="'+A+`" alt="win_edit_env" width="300"></div><p>点击下方的 <code>环境变量(N)...</code>，在弹出的对话框中，在下方的<mark>系统变量</mark>中，找到 <code>Path</code> 变量，这个就是系统动态库的搜索路径，双击可以进行编辑，点击新建，添加 <code>\\path\\to\\RMVL\\x64\\vc17\\bin</code>，点击确定退出。</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>别忘了这里的 <code>\\path\\to\\RMVL</code> 是您自己的 RMVL 安装路径，不要直接复制粘贴。</p></div></li></ul><hr><p>至此，RMVL 的配置工作已经完成，您可以在 <code>RMVLDemo</code> 项目中使用 RMVL 库了。</p><h3 id="测试使用-rmvl" tabindex="-1"><a class="header-anchor" href="#测试使用-rmvl"><span>测试使用 RMVL</span></a></h3><p>回到主界面，在 <code>RMVLDemo</code> 项目中找到源文件栏，右键<code>添加</code>，选择<code>新建项</code>，输入文件名，例如 <code>main.cpp</code>，点击确定，即可创建一个新的源文件。</p><p>在 <code>main.cpp</code> 中输入以下代码：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">iostream</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">rmvl/core.hpp</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">RMVL Version: </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> rm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">version</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;&lt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">endl</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    return</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>点击上方的 <img src="`+b+'" alt="VS Run" width="10"> 本地 Windows 调试器按钮，即可运行该程序，如果输出了 RMVL 的版本号，则说明 RMVL 配置成功。</p><h2 id="方案二" tabindex="-1"><a class="header-anchor" href="#方案二"><span>方案二</span></a></h2><p align="right">—— <code>Visual Studio Code</code> + <code>Microsoft Visual C++</code> + <code>MSBuild</code> + <code>CMake</code></p><p>同样需要下载 Visual Studio，此外还需要下载 <a href="https://code.visualstudio.com/Download" target="_blank" rel="noopener noreferrer">Visual Studio Code</a> 代码编辑器，以及下载 <a href="https://cmake.org/download/" target="_blank" rel="noopener noreferrer">CMake</a>，这里不再赘述。如果您需要使用 OPC UA 相关功能，您还需要安装 Python 3，具体细节可参考<a href="/etc/faq#_1-2-%E5%A6%82%E6%9E%9C%E4%B8%80%E5%AE%9A%E8%A6%81%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91-%E6%80%8E%E4%B9%88%E5%9C%A8-windows-%E4%B8%8A%E5%90%AF%E7%94%A8-opc-ua-%E6%A8%A1%E5%9D%97">此处</a>。</p><h3 id="下载-rmvl-安装包-1" tabindex="-1"><a class="header-anchor" href="#下载-rmvl-安装包-1"><span>下载 RMVL 安装包</span></a></h3><p>从 <a href="https://github.com/cv-rmvl/rmvl/releases" target="_blank" rel="noopener noreferrer">Github</a> 下载 RMVL 安装包，下载完成后双击即可执行安装程序。RMVL 库的安装路径可以自行选择，这里不做要求，比如可以安装在 <code>D:\\RMVL</code> 路径下，后文用 <code>\\path\\to\\RMVL</code> 表示该安装路径。</p><h3 id="测试使用-rmvl-1" tabindex="-1"><a class="header-anchor" href="#测试使用-rmvl-1"><span>测试使用 RMVL</span></a></h3><p>首先在你喜欢的地方创建一个文件夹作为测试项目文件夹，例如 <code>RMVLDemo</code>，在 Visual Studio Code 中打开该文件夹。在左侧<mark>资源管理器</mark>中右键点击<code>新建文件...</code>即可创建新的文件，我们需要依次创建 <code>CMakeLists.txt</code> 和 <code>main.cpp</code> 两个文件。在这两个文件中写入：</p>',17)),a(c,{id:"172",data:[{id:"main.cpp"},{id:"CMakeLists.txt"}]},{title0:l(({value:r,isActive:h})=>[a(k,{name:"vscode-icons:file-type-cpp"}),s[11]||(s[11]=i("span",null,"main.cpp",-1))]),title1:l(({value:r,isActive:h})=>[a(k,{name:"vscode-icons:file-type-text"}),s[12]||(s[12]=i("span",null,"CMakeLists.txt",-1))]),tab0:l(({value:r,isActive:h})=>s[13]||(s[13]=[i("div",{class:"language-cpp line-numbers-mode","data-highlighter":"shiki","data-ext":"cpp",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"#"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"include"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," <"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"iostream"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},">")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"#"),i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"include"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}}," <"),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"rmvl/core.hpp"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},">")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"int"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," main"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"{")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"    std"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"::"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"cout "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"<<"),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},' "'),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},"RMVL Version: "),i("span",{style:{"--shiki-light":"#B5695977","--shiki-dark":"#C98A7D77"}},'"'),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," <<"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," rm"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"::"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"version"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"()"),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}}," <<"),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}}," std"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"::"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"endl"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"    return"),i("span",{style:{"--shiki-light":"#2F798A","--shiki-dark":"#4C9A91"}}," 0"),i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},";")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#999999","--shiki-dark":"#666666"}},"}")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:l(({value:r,isActive:h})=>s[14]||(s[14]=[i("div",{class:"language-cmake line-numbers-mode","data-highlighter":"shiki","data-ext":"cmake",style:{"--shiki-light":"#393a34","--shiki-dark":"#dbd7caee","--shiki-light-bg":"#ffffff","--shiki-dark-bg":"#121212"}},[i("pre",{class:"shiki shiki-themes vitesse-light vitesse-dark vp-code"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"cmake_minimum_required"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"("),i("span",{style:{"--shiki-light":"#59873A","--shiki-dark":"#80A665"}},"VERSION"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}}," 3.16)")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"project"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(RMVLDemo)")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"set"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(RMVL_DIR "),i("span",{style:{"--shiki-light":"#B56959","--shiki-dark":"#C98A7D"}},'"/path/to/RMVL/x64/vc17/lib"'),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},")")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},'# "/path/to/RMVL/" 是 RMVL 安装路径，例如 "D:/RMVL/x64/vc17/lib"')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},'# 也可以写为 "D:\\\\RMVL\\\\x64\\\\vc17\\\\lib"')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#A0ADA0","--shiki-dark":"#758575DD"}},"# 在设置 RMVL_DIR 前，确保 x64/vc17/lib 路径下存在 RMVLConfig.cmake 文件")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"set"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(CMAKE_CXX_STANDARD 17)")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"find_package"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(RMVL REQUIRED)")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"add_executable"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(RMVLDemo main.cpp)")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#1E754F","--shiki-dark":"#4D9375"}},"target_link_libraries"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},"(RMVLDemo "),i("span",{style:{"--shiki-light":"#AB5959","--shiki-dark":"#CB7676"}},"${RMVL_LIBS}"),i("span",{style:{"--shiki-light":"#393A34","--shiki-dark":"#DBD7CAEE"}},")")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[18]||(s[18]=n('<p>里面涉及到了 CMake 的一些基本语法，如果不了解的话可以参考 <a href="https://www.cccolt.top/tutorial/cmake/" target="_blank" rel="noopener noreferrer">现代 CMake 教程</a>。</p><p>在项目文件夹中创建 <code>build</code> 文件夹，如下图</p><div style="text-align:center;"><img src="'+y+`" alt="VSCode Project" width="300"></div><p>在 Visual Studio Code 中的集成终端打开该文件夹，一般可以用 <code>Ctrl + \`</code> 来打开终端。在终端中输入以下命令：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 进入 build 文件夹</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 在上一级路径下寻找 CMakeLists.txt 文件，配置 CMake，并生成到当前文件夹中</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 默认会使用 MSBuild 构建 RMVLDemo 项目</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Release</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 运行 RMVLDemo 项目</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./Release/RMVLDemo.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果输出了 RMVL 的版本号，则说明 RMVL 配置成功。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>一般在 Visual Studio Code 中，推荐安装以下插件：</p><ul><li>CMake</li><li>CMake Tools</li><li>C/C++</li><li>RMVL CMake and IDL</li><li>Git Graph</li></ul><p>其中 <code>CMake</code>、<code>CMake Tools</code> 和 <code>C/C++</code> 三个插件是 C/C++ 开发中比较常用的插件，分别用于 CMake 语法高亮、代码块、自动补全功能，CMake 项目配置相关功能，以及 C/C++ 的语法高亮、智能提示、调试相关功能。而 <code>RMVL CMake and IDL</code> 插件是与 RMVL 相关的插件，可以帮助您更好地使用 RMVL。</p></div><h2 id="方案三" tabindex="-1"><a class="header-anchor" href="#方案三"><span>方案三</span></a></h2><p align="right">—— <code>Qt Creator</code> + <code>MinGW</code> + <code>MinGW Makefiles</code> + <code>CMake</code></p><h3 id="下载-rmvl" tabindex="-1"><a class="header-anchor" href="#下载-rmvl"><span>下载 RMVL</span></a></h3><p>Windows 用户可直接从 <a href="https://github.com/cv-rmvl/rmvl/releases" target="_blank" rel="noopener noreferrer">GitHub</a> 上下载 RMVL 源代码，选择你想要的版本对应的 <code>Source code</code>，下载解压后即可使用。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>也可以使用 Git 命令行工具下载 RMVL 源码，没有 Git 的用户可以先下载 <a href="https://git-scm.com/downloads" target="_blank" rel="noopener noreferrer">Git</a></p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> clone</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> https://github.com/cv-rmvl/rmvl.git</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 2.1.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></div><h3 id="构建-rmvl" tabindex="-1"><a class="header-anchor" href="#构建-rmvl"><span>构建 RMVL</span></a></h3><p>下载或 <code>git clone</code> 后，使用 Qt Creator 打开 RMVL 项目根目录的 <code>CMakeLists.txt</code> 以加载整个项目。</p><p>在加载完成后，您可以在 Qt Creator 左侧点击 <mark>🔧Projects (项目)</mark>，在左侧 <mark>Build &amp; Run (构建和运行)</mark> 选项卡中，选择对应构建工具链下的 <mark>🔨构建</mark>，可以在 <mark>CMake</mark> 选项卡中配置 CMake 参数，如下图所示：</p><p><img src="`+C+'" alt="Qt Creator 配置 RMVL"></p><p>这个中文翻译的不太行，<code>Key</code> 居然能翻译成 “密钥”，应该翻译成 “键” 比较合理。</p><p>配置完成后，点击当前页底下的 <mark>执行 CMake</mark>，等待 CMake 完成配置后，点击左下角的 🔨 即可构建 RMVL。</p><h3 id="测试、安装" tabindex="-1"><a class="header-anchor" href="#测试、安装"><span>测试、安装</span></a></h3><p>构建完成后，可以点击左下角的 <img src="'+M+`" alt="RMVL Select" width="40" style="vertical-align:middle;"> 选择希望运行的 RMVL 可执行程序，一般选择 <code>rmvl_version</code> 作为测试程序，选择完成后，点击绿色的三角形按钮即可运行该测试程序。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>对于不使用 Qt 但是需要源码编译的用户，可以在 RMVL 项目根目录打开 <code>Windows PowerShell</code>，输入以下命令，构建并安装 RMVL</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">mkdir</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">cd</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> build</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ..</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --build</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --parallel</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 8</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Release</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">cmake</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --install</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> .</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --config</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> Release</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Windows 下的 <code>cmake --install .</code> 命令会将 RMVL 安装到 <code>install</code> 目录下，您可以在 <code>install</code> 目录下找到 <code>rmvl_version.exe</code>，打开 <code>Windows PowerShell</code>，输入</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">./rmvl_version.exe</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>若显示对应版本号，则说明安装成功</p></div>`,21))])}const R=g(D,[["render",f]]),w=JSON.parse('{"path":"/quickstart/win.html","title":"Windows 配置教程","lang":"zh-CN","frontmatter":{"title":"Windows 配置教程","description":"前置环境安装 Windows 上最强大的 C++ 开发工具当属 Visual Studio，您可以在官网下载免费的 Visual Studio Community 版本，其中包含了 Microsoft Visual C++ 编译器，是 Windows 上常用的 C++ 编译器。 此外，如果您对 GNU 标准更感兴趣，您可以使用 MinGW 编译器，比较...","head":[["meta",{"property":"og:url","content":"https://cv-rmvl.github.io/quickstart/win.html"}],["meta",{"property":"og:site_name","content":"RMVL 用户手册"}],["meta",{"property":"og:title","content":"Windows 配置教程"}],["meta",{"property":"og:description","content":"前置环境安装 Windows 上最强大的 C++ 开发工具当属 Visual Studio，您可以在官网下载免费的 Visual Studio Community 版本，其中包含了 Microsoft Visual C++ 编译器，是 Windows 上常用的 C++ 编译器。 此外，如果您对 GNU 标准更感兴趣，您可以使用 MinGW 编译器，比较..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://cv-rmvl.github.io/images/quickstart/win/vs_config.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-29T13:49:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-29T13:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Windows 配置教程\\",\\"image\\":[\\"https://cv-rmvl.github.io/images/quickstart/win/vs_config.png\\",\\"https://cv-rmvl.github.io/images/quickstart/win/qt_config.png\\"],\\"dateModified\\":\\"2025-03-29T13:49:46.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":9.09,"words":2727},"git":{"updatedTime":1743256186000,"contributors":[{"name":"zhaoxi","username":"zhaoxi","email":"535394140@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/zhaoxi?v=4","url":"https://github.com/zhaoxi"}]},"autoDesc":true,"filePathRelative":"quickstart/win.md","bulletin":false}');export{R as comp,w as data};
