import{_ as h,c as r,a,b as i,d as e,w as n,r as p,o as k,e as t}from"./app-sBJX2iis.js";const c={},o={class:"full_width_table"},v={class:"hint-container important"},g={class:"hint-container important"};function m(u,s){const d=p("center"),l=p("RouteLink");return k(),r("div",null,[s[6]||(s[6]=a(`<h3 id="_1-参数模块简介" tabindex="-1"><a class="header-anchor" href="#_1-参数模块简介"><span>1. 参数模块简介</span></a></h3><p>RMVL 中，一部分模块（涉及主要模块和扩展模块）的功能在不同运行环境或者不同需求的情况下需要有不同的参数配置，为此 RVML 将这些运行时可变的参数提炼出来，并且使用统一的管理方式，完成了参数类型、参数默认值、参数名、参数运行时加载的定义。</p><p>原先若有计划使用运行时参数，在</p><ul><li>调整参数名、参数默认值</li><li>新增某一参数类（结构体）</li></ul><p>的时候，需要在头文件以及对应源文件的位置写上大量重复的代码，管理极其不方便。为此 RMVL 参数模块定义了新的参数规范文件，这类文件以 <code>*.para</code> 为后缀，以及提供了 CMake 配置期间将 <code>*.para</code> 转换为对应 <code>*.h(hpp)</code> 以及 <code>*.cpp</code> 的 CMake 函数 <code>rmvl_generate_para</code>，该函数定义在 <code>&lt;project&gt;/cmake/RMVLGenPara.cmake</code> 文件中。</p><h3 id="_2-参数规范文件" tabindex="-1"><a class="header-anchor" href="#_2-参数规范文件"><span>2. 参数规范文件</span></a></h3><p>这里举一个 <code>*.para</code> 文件的示例，写法与 ROS Message 的 <code>*.msg</code> 文件类似，不过参数的类型均使用 C/C++ 中的类型，并且添加了注释功能。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>#################### 光学参数 ####################</span></span>
<span class="line"><span>float exposure = 1500  # 相机曝光</span></span>
<span class="line"><span>float saturation = 100 # 相机饱和度</span></span>
<span class="line"><span>float gain = 64        # 相机数字增益</span></span>
<span class="line"><span>uint32_t b_gain = 1500 # 相机蓝色增益</span></span>
<span class="line"><span>uint32_t g_gain = 1500 # 相机绿色增益</span></span>
<span class="line"><span>uint32_t r_gain = 1500 # 相机红色增益</span></span>
<span class="line"><span>int auto_exposure = 0  # 相机自动曝光模式</span></span>
<span class="line"><span>int auto_wb = 0        # 相机自动白平衡模式</span></span>
<span class="line"><span></span></span>
<span class="line"><span>#################### 设备参数 ####################</span></span>
<span class="line"><span>int grab_mode = 1     # 相机 grab 模式</span></span>
<span class="line"><span>int retrieve_mode = 1 # 相机 retrieve 模式</span></span>
<span class="line"><span>string serial_number  # 相机序列号</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里列出参数规范文件的参数类型表</p>`,9)),i("div",o,[e(d,null,{default:n(()=>s[0]||(s[0]=[i("p",null,"表1：参数类型表",-1)])),_:1}),s[1]||(s[1]=a('<table><thead><tr><th style="text-align:center;">数据类型</th><th style="text-align:left;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">基本类型</td><td style="text-align:left;">1. 包括 <code>int</code>、<code>uint8_t</code>、<code>double</code>、<code>float</code>、<code>string</code> 等<br>2. 对标 C++ 的基础类型和 <code>std::string</code></td></tr><tr><td style="text-align:center;">矩阵类型</td><td style="text-align:left;">1. 包括形如 <code>Matx??</code>、<code>Vec?</code> 的类型，例如 <code>Matx22f</code><br>2. 对标 OpenCV 的 <code>cv::Matx</code> 和 <code>cv::Vec</code><br>3. 可使用列表初始化和相关静态函数初始化，例如 <code>Matx22f::eye()</code></td></tr><tr><td style="text-align:center;">复合类型</td><td style="text-align:left;">1. 包括 <code>vector</code> 和形如 <code>Point?</code> 的类型<br>2. 对标 C++ 的 <code>std::vector</code> 以及 OpenCV 的<code>cv::Point2?</code> 和 <code>cv::Point3?</code><br>3. 只能使用列表初始化，例如 <code>{1, 2, 3}</code></td></tr><tr><td style="text-align:center;">枚举类型</td><td style="text-align:left;">1. 需要用户自定以 <code>enum</code> 开头和 <code>endenum</code> 结尾的数据类型声明<br>2. 对标 C++ 的有作用域枚举类型 <code>enum class</code><br>3. 变量的定义上与有作用域枚举类型一致，例如 <code>Color COLOR_MODE = Color::RED</code></td></tr></tbody></table>',1))]),s[7]||(s[7]=a(`<p>如果要给某一条参数设置默认值，需要使用 <code>=</code> 完成，不需要默认参数（仅由运行时加载设置）则不需要使用 <code>=</code> 进行赋值，例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int grab_mode = 1</span></span>
<span class="line"><span>string serial_number</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如果要给某一参数设置注释信息，请<span style="color:red;">尾置</span> <code>#</code> 并输入相应注释信息，例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>float exposure = 1500 # 相机曝光</span></span>
<span class="line"><span>float gain = 64       # 相机数字增益</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li><code>#</code> 和注释信息之间<u><strong>不必</strong></u>使用空格分隔，例如 <code>#相机曝光</code></li></ul></div><p>枚举类型可在每个枚举项后加上具体的值，也能使用 <code>#</code> 为枚举项添加注释，例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>enum ColorMode # 颜色类型</span></span>
<span class="line"><span>  RED          # 红色</span></span>
<span class="line"><span>  GREEN        # 绿色</span></span>
<span class="line"><span>  BLUE = 4     # 蓝色</span></span>
<span class="line"><span>  GRAY = 5</span></span>
<span class="line"><span>endenum</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ColorMode COLOR = ColorMode::RED # 颜色信息</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-c-代码生成" tabindex="-1"><a class="header-anchor" href="#_3-c-代码生成"><span>3. C++ 代码生成</span></a></h3><p>从 <code>*.para</code> 到对应的 C++ 代码生成的过程依赖 RMVL 提供的两条 CMake 函数，分别是</p><ul><li><code>rmvl_generate_para</code></li><li><code>rmvl_generate_module_para</code></li></ul><h4 id="_3-1-rmvl-generate-para" tabindex="-1"><a class="header-anchor" href="#_3-1-rmvl-generate-para"><span>3.1 rmvl_generate_para</span></a></h4>`,11)),i("div",v,[s[3]||(s[3]=i("p",{class:"hint-container-title"},"参考",-1)),i("ul",null,[i("li",null,[e(l,{to:"/intro/extension/ext_cmake.html#rmvl-generate-para"},{default:n(()=>s[2]||(s[2]=[t("rmvl_generate_para")])),_:1})])])]),s[8]||(s[8]=a('<p>表示解析当前目录下的 <code>param/mytarget.para</code> 文件，并作为模块 <code>mymodule</code> 的子模块。最终生成的文件是</p><ul><li><code>include/rmvlpara/mymodule/mytarget.h</code>，<code>include/rmvlpara</code> 后文简记为 <code>&lt;prefix&gt;</code></li><li><code>src/para/mytarget.cpp</code></li></ul><p>这样的话会为参数模块汇总的头文件 <code>&lt;prefix&gt;/mymodule.hpp</code> 添加 <code>&lt;prefix&gt;/mymodule/mytarget.h</code> 文件的包含，即会在 <code>&lt;prefix&gt;/mymodule.hpp</code> 中添加</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">mymodule/mytarget.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果 <code>mytarget</code> 需要自成一个模块的话，那么在调用 <code>rmvl_generate_para</code> 函数的时候应该写为</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_para(mytarget)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样就会生成一个名为 <code>mytarget</code> 的参数模块了，最终生成的文件是</p><ul><li><code>include/rmvlpara/mytarget.hpp</code></li><li><code>src/para/mytarget.cpp</code></li></ul><h4 id="_3-2-rmvl-generate-module-para" tabindex="-1"><a class="header-anchor" href="#_3-2-rmvl-generate-module-para"><span>3.2 rmvl_generate_module_para</span></a></h4>',9)),i("div",g,[s[5]||(s[5]=i("p",{class:"hint-container-title"},"参考",-1)),i("ul",null,[i("li",null,[e(l,{to:"/intro/extension/ext_cmake.html#rmvl-generate-module-para"},{default:n(()=>s[4]||(s[4]=[t("rmvl_generate_module_para")])),_:1})])])]),s[9]||(s[9]=a(`<p>表示将模块 <code>mymodule</code> 中的所有子模块打包至参数模块汇总头文件 <code>&lt;prefix&gt;/mymodule.hpp</code> ，例如，如果在 <code>CMakeLists.txt</code> 中写入</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_para(a1 MODULE m)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_para(a2 MODULE m)</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_para(a3 MODULE m)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_module_para(m)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后生成的 <code>&lt;prefix&gt;/m.hpp</code> 中就会包含</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m/a1.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m/a2.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">#</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">include</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">m/a3.h</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上内容均是在 CMake 配置期间自动完成，只需定义好参数规范文件 <code>*.para</code> 以及相应的 CMake 函数即可。</p><h3 id="_4-运行时加载" tabindex="-1"><a class="header-anchor" href="#_4-运行时加载"><span>4. 运行时加载</span></a></h3><h4 id="_4-1-加载方式" tabindex="-1"><a class="header-anchor" href="#_4-1-加载方式"><span>4.1 加载方式</span></a></h4><p>例如，对于以下的 <code>test.para</code> 文件</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int abc = 10 # 测试数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在使用 <code>rmvl_generate_para(test)</code> 之后，生成的头文件代码中，类相关的代码如下</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//! TestParam 参数模块</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> RMVL_EXPORTS_W</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> TestParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //! 测试数 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@note</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 默认值：\`10\`</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    RMVL_W_RW </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> abc </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    //! 创建 TestParam 参数对象 </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@warning</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 不建议手动创建对象</span></span>
<span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">    RMVL_W</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> TestParam</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> default</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@brief</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 从指定 \`YAML\` 文件中加载，并读取至 \`TestParam\` 中</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@note</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> \`YAML\` 文件的后缀允许是 \`*.yml\` 和 \`*.yaml\`</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@param</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">] </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 参数路径</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 是否读取成功</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    RMVL_W </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@brief</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 将 \`TestParam\` 的数据写入指定的 \`YAML\` 文件中</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     *</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@note</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> \`YAML\` 文件的后缀允许是 \`*.yml\` 和 \`*.yaml\`</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@param</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">[</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">in</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">] </span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">path</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 参数路径</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     * </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">@return</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 是否写入成功</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">     */</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    RMVL_W </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">bool</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> write</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> std</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">string </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">path</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//! TestParam 参数模块</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> TestParam test_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中包含了运行时参数导入和导出的接口 <code>read</code> 和 <code>write</code>，以 algorithm 的参数模块为例，<code>rm::para::AlgorithmParam::read</code> 用于运行时读取 YAML 文件并配置 algorithm 模块的参数，<code>rm::para::AlgorithmParam::write</code> 用于将当前 algorithm 模块的参数写入到 YAML 文件中。</p><p>用户可以通过使用类似以下的代码完成运行时加载</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* code */</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">para</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">algorithm_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">prefix_path </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">algorithm.yml</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/* code */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2-yaml-文件格式" tabindex="-1"><a class="header-anchor" href="#_4-2-yaml-文件格式"><span>4.2 YAML 文件格式</span></a></h4><p>对于某个 <code>*.para</code> 文件中的参数，可以通过 YAML 文件进行运行时配置，例如</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>int num = 10      # Test number</span></span>
<span class="line"><span>float value = 4.2 # Test value</span></span>
<span class="line"><span>string name       # Test name</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对应的 YAML 文件可以写为</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># test.yml</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">%</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">YAML</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:1.0</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">num</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">name</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Hello, RMVL</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在程序调用</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">rm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">para</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">test_param</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">read</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">prefix_path </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">test.yml</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>时，会实时加载该 YAML 文件，此时</p><ul><li><code>num</code> 的值会被设置为 <code>20</code></li><li><code>name</code> 的值会被设置为 <code>Hello, RMVL</code></li><li><code>value</code> 在 YAML 文件中为设置该值，因此 <code>value</code> 的值会保持不变，即为默认的 <code>4.2</code></li></ul><p>可以使用 <code>rmvl_generate_para</code> CMake 宏生成参数模块的 C/C++ 文件，例如原先的文件架构为</p><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── include</span></span>
<span class="line"><span>│   └── rmvl</span></span>
<span class="line"><span>│       ├── aa</span></span>
<span class="line"><span>│       │   ├── a1.hpp</span></span>
<span class="line"><span>│       │   └── a2.hpp</span></span>
<span class="line"><span>│       └── aa.hpp</span></span>
<span class="line"><span>├── param</span></span>
<span class="line"><span>│   └── a1.para</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    ├── a1</span></span>
<span class="line"><span>    │   └── a1.cpp</span></span>
<span class="line"><span>    └── a2</span></span>
<span class="line"><span>        ├── a2_impl.cpp</span></span>
<span class="line"><span>        └── a2.cpp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>7 directories, 8 files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>其中 <code>a1.para</code> 是希望用于生成参数模块 C/C++ 文件的参数规范文件。</p><p>在 CMakeLists.txt 中添加模块（一般是 <code>add_library(aa XXX)</code> 或者 RMVL 中的 <code>rmvl_add_module(aa XXX)</code>）之前的位置写上</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_para(</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  a1</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  MODULE aa</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>即可生成 <code>aa/a1</code> 的参数模块，在文件末尾写上</p><div class="language-cmake line-numbers-mode" data-highlighter="shiki" data-ext="cmake" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">rmvl_generate_module_para(aa)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>即可生成 <code>aa</code> 参数模块的汇总头文件。</p><p>运行 <code>cmake ..</code> 后的文件结构如下</p><div class="language- line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="" style="--vp-collapsed-lines:15;--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── CMakeLists.txt</span></span>
<span class="line"><span>├── include</span></span>
<span class="line"><span>│   ├── rmvl</span></span>
<span class="line"><span>│   │   ├── aa</span></span>
<span class="line"><span>│   │   │   ├── a1.hpp</span></span>
<span class="line"><span>│   │   │   └── a2.hpp</span></span>
<span class="line"><span>│   │   └── aa.hpp</span></span>
<span class="line"><span>│   └── rmvlpara</span></span>
<span class="line"><span>│       ├── aa</span></span>
<span class="line"><span>│       │   └── a1.h</span></span>
<span class="line"><span>│       └── aa.hpp</span></span>
<span class="line"><span>├── param</span></span>
<span class="line"><span>│   └── a1.para</span></span>
<span class="line"><span>└── src</span></span>
<span class="line"><span>    ├── a1</span></span>
<span class="line"><span>    │   ├── a1.cpp</span></span>
<span class="line"><span>    │   └── para</span></span>
<span class="line"><span>    │       └── param.cpp</span></span>
<span class="line"><span>    └── a2</span></span>
<span class="line"><span>        ├── a2_impl.cpp</span></span>
<span class="line"><span>        └── a2.cpp</span></span>
<span class="line"><span></span></span>
<span class="line"><span>9 directories, 10 files</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p>其中新生成的文件为 <code>include/rmvlpara/**</code> 和 <code>src/a1/para/**</code>。</p>`,34))])}const y=h(c,[["render",m]]),A=JSON.parse('{"path":"/intro/repo/03.html","title":"【03】参数模块","lang":"zh-CN","frontmatter":{"title":"【03】参数模块","description":"1. 参数模块简介 RMVL 中，一部分模块（涉及主要模块和扩展模块）的功能在不同运行环境或者不同需求的情况下需要有不同的参数配置，为此 RVML 将这些运行时可变的参数提炼出来，并且使用统一的管理方式，完成了参数类型、参数默认值、参数名、参数运行时加载的定义。 原先若有计划使用运行时参数，在 调整参数名、参数默认值 新增某一参数类（结构体） 的时候，...","head":[["meta",{"property":"og:url","content":"https://cv-rmvl.github.io/intro/repo/03.html"}],["meta",{"property":"og:site_name","content":"RMVL 用户手册"}],["meta",{"property":"og:title","content":"【03】参数模块"}],["meta",{"property":"og:description","content":"1. 参数模块简介 RMVL 中，一部分模块（涉及主要模块和扩展模块）的功能在不同运行环境或者不同需求的情况下需要有不同的参数配置，为此 RVML 将这些运行时可变的参数提炼出来，并且使用统一的管理方式，完成了参数类型、参数默认值、参数名、参数运行时加载的定义。 原先若有计划使用运行时参数，在 调整参数名、参数默认值 新增某一参数类（结构体） 的时候，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-29T13:49:46.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-29T13:49:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【03】参数模块\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-29T13:49:46.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":5.9,"words":1769},"git":{"updatedTime":1743256186000,"contributors":[{"name":"zhaoxi","username":"zhaoxi","email":"535394140@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/zhaoxi?v=4","url":"https://github.com/zhaoxi"}]},"autoDesc":true,"filePathRelative":"intro/repo/03.md","bulletin":false}');export{y as comp,A as data};
